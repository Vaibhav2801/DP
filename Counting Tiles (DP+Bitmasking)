 #include<bits/stdc++.h>
 using namespace std;
 #define int long long 
 #define endl "\n"
 const double pi=3.141593;
 const int mod=1e9+7;
 const int INF=1e9;
 #define FAST ios_base::sync_with_stdio(false)
 #define T double t;cin>>t; while(t--)
 #define vll vector<int>
 #define pb push_back
 #define ff first
 #define ss second
 #define str to_string
 #define intt stoll
 #define all(x) x.begin(),x.end()
 int dp[1001][(1<<11)];
void generate_next_masks(int mask,int i,int next_mask,int n,vector<int> &next_masks){
  if(i==(n+1)){
    next_masks.pb(next_mask);
    return ;
  }
  if((mask&(1<<i))!=0)    {
 //     cout<<-1<<endl;
    generate_next_masks(mask,i+1,next_mask,n,next_masks);
  }
  if(i!=n){
    if((mask&(1<<i))==0 && (mask&(1<<(i+1)))==0) {
      //  cout<<-2<<endl;
      //  cout<<mask<<" "<<i<<" "<<next_mask<<" "<<n<<endl;
      generate_next_masks(mask,i+2,next_mask,n,next_masks);
    }
  }
  if((mask&(1<<i))==0)    {
    //   cout<<-3<<endl;
    //  cout<<mask<<" "<<i<<" "<<next_mask<<" "<<n<<endl;
    generate_next_masks(mask,i+1,next_mask+(1<<i),n,next_masks); 
  }
  
}
int solve(int col,int mask,int n, int m){
  if(col==(m+1)){
    if(mask==0)   return 1;
    return 0;
  }
  if(dp[col][mask]!=-1)    return dp[col][mask];
  int ans=0;
  vector<int> next_masks;
   generate_next_masks(mask,1,0,n,next_masks);
  // cout<<mask<<" "<<col<<endl;
  // for(auto i:next_masks)  cout<<i<<" ";
  // cout<<endl<<endl;
  for(auto i:next_masks){
    ans=(ans+solve(col+1,i,n,m))%mod;
  }
  return dp[col][mask]=ans;
}
 int32_t main(){
   int n,m;  cin>>n>>m;
   memset(dp,-1,sizeof dp);
   cout<<solve(1,0,n,m)<<endl;
 }
